# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import inventory_pb2 as inventory__pb2

GRPC_GENERATED_VERSION = "1.72.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
  from grpc._utilities import first_version_is_lower

  _version_not_supported = first_version_is_lower(
      GRPC_VERSION, GRPC_GENERATED_VERSION
  )
except ImportError:
  _version_not_supported = True

if _version_not_supported:
  raise RuntimeError(
      f"The grpc package installed is at version {GRPC_VERSION},"
      + f" but the generated code in inventory_pb2_grpc.py depends on"
      + f" grpcio>={GRPC_GENERATED_VERSION}."
      + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
      +
      f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
  )


class InventoryServiceStub(object):
  """Missing associated documentation comment in .proto file."""

  def __init__(self, channel):
    """Constructor.

    Args:
        channel: A grpc.Channel.
    """
    self.CheckInventory = channel.unary_unary(
        "/ecommerce.InventoryService/CheckInventory",
        request_serializer=inventory__pb2.CheckInventoryRequest.SerializeToString,
        response_deserializer=inventory__pb2.CheckInventoryResponse.FromString,
        _registered_method=True,
    )
    self.UpdateInventory = channel.unary_unary(
        "/ecommerce.InventoryService/UpdateInventory",
        request_serializer=inventory__pb2.UpdateInventoryRequest.SerializeToString,
        response_deserializer=inventory__pb2.UpdateInventoryResponse.FromString,
        _registered_method=True,
    )


class InventoryServiceServicer(object):
  """Missing associated documentation comment in .proto file."""

  def CheckInventory(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details("Method not implemented!")
    raise NotImplementedError("Method not implemented!")

  def UpdateInventory(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details("Method not implemented!")
    raise NotImplementedError("Method not implemented!")


def add_InventoryServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      "CheckInventory": grpc.unary_unary_rpc_method_handler(
          servicer.CheckInventory,
          request_deserializer=inventory__pb2.CheckInventoryRequest.FromString,
          response_serializer=inventory__pb2.CheckInventoryResponse.SerializeToString,
      ),
      "UpdateInventory": grpc.unary_unary_rpc_method_handler(
          servicer.UpdateInventory,
          request_deserializer=inventory__pb2.UpdateInventoryRequest.FromString,
          response_serializer=inventory__pb2.UpdateInventoryResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      "ecommerce.InventoryService", rpc_method_handlers
  )
  server.add_generic_rpc_handlers((generic_handler,))
  server.add_registered_method_handlers(
      "ecommerce.InventoryService", rpc_method_handlers
  )


# This class is part of an EXPERIMENTAL API.
class InventoryService(object):
  """Missing associated documentation comment in .proto file."""

  @staticmethod
  def CheckInventory(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        "/ecommerce.InventoryService/CheckInventory",
        inventory__pb2.CheckInventoryRequest.SerializeToString,
        inventory__pb2.CheckInventoryResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
        _registered_method=True,
    )

  @staticmethod
  def UpdateInventory(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        "/ecommerce.InventoryService/UpdateInventory",
        inventory__pb2.UpdateInventoryRequest.SerializeToString,
        inventory__pb2.UpdateInventoryResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
        _registered_method=True,
    )
